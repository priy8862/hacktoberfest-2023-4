Given two binary trees with same number of nodes, the task is to check if each of their levels are anagrams of each other or not. 

Example 1:

Input:

Output: 1
Explanation: 
Tree 1:
Level 0 : 1
Level 1 : 3, 2
Level 2 : 5, 4

Tree 2:
Level 0 : 1
Level 1 : 2, 3
Level 2 : 4, 5

As we can clearly see all the levels of above two binary trees 
are anagrams of each other, hence return true.



class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def areAnagrams(root1, root2):
    def levelOrderTraversal(root):
        if not root:
            return []

        result = []
        queue = [root]

        while queue:
            current_level = []
            next_queue = []

            for node in queue:
                if node:
                    current_level.append(node.val)
                    next_queue.append(node.left)
                    next_queue.append(node.right)
                else:
                    current_level.append(None)

            result.append(current_level)
            queue = next_queue

        return result

    levels1 = levelOrderTraversal(root1)
    levels2 = levelOrderTraversal(root2)

    return levels1 == levels2

# Example usage:
if __name__ == "__main__":
    root1 = TreeNode(1)
    root1.left = TreeNode(3)
    root1.right = TreeNode(2)
    root1.left.left = TreeNode(5)
    root1.left.right = TreeNode(4)

    root2 = TreeNode(1)
    root2.left = TreeNode(2)
    root2.right = TreeNode(3)
    root2.left.left = TreeNode(4)
    root2.left.right = TreeNode(5)

    result = areAnagrams(root1, root2)
    print(result)  # Output: True
